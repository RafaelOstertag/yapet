<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"
[
<!ENTITY preamble SYSTEM "@srcdir@/preamble.sgml">
<!ENTITY supplatforms SYSTEM "@srcdir@/supportedplatforms.sgml">
<!ENTITY pwrecord SYSTEM "@srcdir@/pwrecord.sgml">
<!ENTITY OPENSSL "<citerefentry><refentrytitle>ssl</refentrytitle>
<manvolnum>3</manvolnum></citerefentry>">
<!ENTITY CRYPTO "<citerefentry><refentrytitle>crypto</refentrytitle>
<manvolnum>3</manvolnum></citerefentry>">
<!ENTITY CURSES "<citerefentry><refentrytitle>curses</refentrytitle>
<manvolnum>3X</manvolnum></citerefentry>">
<!ENTITY YP "@PACKAGE_NAME@">
<!ENTITY FREEBSD "<trademark class='registered'>FreeBSD</trademark>">
<!ENTITY SOLARIS "<trademark class='trademark'>Sun</trademark>
<trademark class='trademark'>Solaris</trademark>">
<!ENTITY YPPKG "@PACKAGE_TARNAME@-@PACKAGE_VERSION@.tar.gz">
<!ENTITY YPVER "@PACKAGE_VERSION@">
]>
<article>

  <articleinfo>
    <title>&YP; - Design</title>
    <author>
      <firstname>Rafael</firstname>
      <surname>Ostertag</surname>
    </author>
    <releaseinfo>
      $Id$
    </releaseinfo>
  </articleinfo>

  &preamble;

  <sect1 id="general">
    <title>General</title>

    <para>&YP; stores passwords encrypted to disk. Passwords are kept
      in records with additional information. A record is comprised by
      the following components:
    </para>
    &pwrecord;

    <para>The encryption and hash functions used by &YP; are provided
      by the &CRYPTO; library of &OPENSSL;. &YP; does not provide them
      itself.</para>
  </sect1>

  <sect1 id="masterpassword">
    <title>Master Password</title>

    <para>&YP; uses a master password provided by the user to generate
      a key in order to encrypt and decrypt the password records. The
      master password is not stored permanently. It has to be entered
      when a file is opened or the screen is locked in order to unlock
      it.</para>
  </sect1>

  <sect1 id="encryptionkey">
    <title>Encryption Key</title>

    <para>The encryption key is generated by calculating a SHA1 hash
      of the master password. MD5 is used to hash the SHA1 hash. Both
      hashes are concatenated. Finally, RIPEMD-160 is used to generate
      a hash of the SHA1 and MD5 hashes. The RIPEMD-160 hash is then
      appended to the SHA1 and MD5 hash, yielding a key of 448
      bits. This key will be used for the Blowfish encryption
      algorithm in order to encrypt and decrypt password
      records.</para>
  </sect1>

  <sect1 id="filestructure">
    <title>File Structure</title>

    <para>A file created by &YP; has the following basic
    structure</para>

    <orderedlist>
      <listitem><simpara>Clear text recognition
      string</simpara></listitem>

      <listitem><simpara>Clear text header length indicator
      (prefix)</simpara></listitem>

      <listitem><simpara>Encrypted header</simpara></listitem>

      <listitem><simpara>Clear text password record length indicator
      (prefix)</simpara></listitem>

      <listitem><simpara>Encrypted password
      record</simpara></listitem>

      <listitem><simpara>Clear text password record length indicator
      (prefix)</simpara></listitem>

      <listitem><simpara>Encrypted password
      record</simpara></listitem>

      <listitem><simpara>&hellip;</simpara></listitem>
    </orderedlist>

    <para>The prefixes are stored in big-endian order, regardless of
    the endianess of the platform &YP; is running.</para>

    <sect2 id="recogstring">
      <title>Recognition String</title>

      <para>Each file created by &YP; starts with a unencrypted
	recognition string which currently consists of the 8
	bytes <literal>YAPET1.0</literal> as depicted in
	<xref linkend="fig.recogstring" />.</para>

      <figure id="fig.recogstring">
	<title>Recognition String</title>
	<mediaobject>
	  <textobject>
<screen>
+--------+--------+--------+--------+--------+--------+--------+--------+
|   Y    |   A    |   P    |   E    |   T    |   1    |   .    |   0    |
| 1 byte | 1 byte | 1 byte | 1 byte | 1 byte | 1 byte | 1 byte | 1 byte |
+--------+--------+--------+--------+--------+--------+--------+--------+
</screen>
	  </textobject>
	</mediaobject>
      </figure>
    </sect2>

    <sect2 id="fileheader">
      <title>Header</title>

      <para>After the recognition string a 4 byte unsigned integer
	which is stored in big-endian order follows. This indicator is
	read to determine how many bytes to read in order to get the
	encrypted header (<xref linkend="fig.encryptedheader"
	/>).</para>

      <figure id="fig.encryptedheader">
	<title>Encrypted Header</title>
	<mediaobject>
	  <textobject>
<screen>
+--------+--------+--------+--------+
|   Length indicator in big-endian  |
|         order (4 bytes)           |
+--------+--------+--------+--------+--...---+
|  Encrypted header exactly as many bytes    |
|        indicated by the prefix             |
+--------+--------+--------+--------+--...---+
</screen>
	  </textobject>
	</mediaobject>
      </figure>

      <para>The decrypted header
	(<xref linkend="fig.decryptedheader"/>) is 25 bytes in
	size. The first byte indicates the version of the file. The
	next 20 bytes are used as control string. After decryption,
	the control string is compared to the predefined clear text
	control string, in order to find out whether or not the key
	used to decrypt was the same used to encrypt.</para>

      <figure id="fig.decryptedheader">
	<title>Decrypted Header</title>
	<mediaobject>
	  <textobject>
<screen>
+--------+
|Version |
| 1 byte |
+--------+--------+--------+--...---+
|          Control String           |
|             20 bytes              |
+--------+--------+--------+--...---+
|  Time when the Password  |
|    was set (4 bytes)     |
+--------+--------+--------+
</screen>
	  </textobject>
	</mediaobject>
      </figure>
    </sect2>

    <sect2 id="passwordrecord">
      <title>Password Records</title>

      <para>Each encrypted password record is prefixed by a 4 byte
	unsigned integer which is stored in big-endian order. That
	integer is used to indicate the length of the following
	encrypted data chunk.
      </para>

      <figure id="fig.passwordrecord">
	<title>Encrypted Password Record</title>
	<mediaobject>
	  <textobject>
	    <screen>
+--------+--------+--------+--------+
|   Length indicator in big-endian  |
|         order (4 bytes)           |
+--------+--------+--------+--------+--...---+
|  Encrypted password record of exactly as   |
|   many bytes as indicated by the prefix    |
+--------+--------+--------+--------+--...---+
|   Length indicator in big-endian  |
|         order (4 bytes)           |
+--------+--------+--------+--------+--...---+
|  Encrypted password record of exactly as   |
|   many bytes as indicated by the prefix    |
+--------+--------+--------+--------+--...---+
	      [ . . . ]
</screen>
	  </textobject>
	</mediaobject>
      </figure>
    </sect2>

    <sect2 id="example">
      <title>Example</title>

      <para>Putting this together, an encrypted file created by &YP;
	may look like this</para>

      <figure id="fig.examplefile">
	<title>Encrypted File Example</title>
	<mediaobject>
	  <textobject>
	    <screen>
+--------+--------+--------+--------+--------+--------+--------+--------+
|   Y    |   A    |   P    |   E    |   T    |   1    |   .    |   0    |
| 1 byte | 1 byte | 1 byte | 1 byte | 1 byte | 1 byte | 1 byte | 1 byte |
+--------+--------+--------+--------+--------+--------+--------+--------+
|   Length indicator in big-endian  |
|         order (4 bytes)           |
+--------+--------+--------+--------+--...---+
|  Encrypted header exactly as many bytes    |
|        indicated by the prefix             |
+--------+--------+--------+--------+--...---+
|   Length indicator in big-endian  |
|         order (4 bytes)           |
+--------+--------+--------+--------+--...---+
|  Encrypted password record of exactly as   |
|   many bytes as indicated by the prefix    |
+--------+--------+--------+--------+--...---+
|   Length indicator in big-endian  |
|         order (4 bytes)           |
+--------+--------+--------+--------+--...---+
|  Encrypted password record of exactly as   |
|   many bytes as indicated by the prefix    |
+--------+--------+--------+--------+--...---+
	      [ . . . ]
</screen>
	  </textobject>
	</mediaobject>
      </figure>
      </sect2>
  </sect1>

  <sect1 id="security">
    <title>Security</title>

    <para>Memory used for storing sensitive information is cleared by
      setting it to zero upon de-allocation. This is default behavior
      of &YP; functions. However, &YP; cannot alter the way functions
      provided by &CRYPTO; and &CURSES; de-allocates memory. An attempt
      to make &CURSES; more secure is taken by
      calling <citerefentry><refentrytitle><function>wclear</function></refentrytitle>
	<manvolnum>3X</manvolnum></citerefentry> before
      calling <citerefentry><refentrytitle><function>delwin</function></refentrytitle>
	<manvolnum>3X</manvolnum></citerefentry>, in the hope that
      it clears the memory associated with the curses window.
    </para>

    <para>&YP;
      uses <citerefentry><refentrytitle><function>setrlimit</function></refentrytitle><manvolnum>2</manvolnum></citerefentry>
      to suppress the creation of core dumps. It also sets up signal
      handlers
      for <literal>SIGHUP</literal>, <literal>SIGINT</literal>, <literal>SIGQUIT</literal>, <literal>SIGTERM</literal>,
      and <literal>SIGKILL</literal> for doing a proper cleanup and
      clearing of allocated memory.</para>

    <para>Apart from memory clearing, &YP; locks the screen after ten
    minutes of inactivity.</para>

    <para>&YP; does not keep the password records decrypted in
    memory. It decrypts only the name of the password record in order
    to show it to the user. Password records are only decrypted for
    displaying and editing, when the user chooses to open a record.
    </para>
  </sect1>

  <sect1 id="references">
    <title>References</title>

    <para>See also the code documentation that comes along with the
    source tarball of &YP;.</para>
  </sect1>
</article>

